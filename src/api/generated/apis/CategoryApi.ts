/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Category,
    CategoryFromJSON,
    CategoryToJSON,
    NewCategory,
    NewCategoryFromJSON,
    NewCategoryToJSON,
} from '../models';

export interface CategoriesGetRequest {
    limit?: number;
    sort?: string;
    start?: number;
}

export interface CategoriesIdDeleteRequest {
    id: string;
}

export interface CategoriesIdGetRequest {
    id: string;
}

export interface CategoriesIdPutRequest {
    id: string;
    newCategory: NewCategory;
}

export interface CategoriesPostRequest {
    newCategory: NewCategory;
}

/**
 * CategoryApi - interface
 * 
 * @export
 * @interface CategoryApiInterface
 */
export interface CategoryApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiInterface
     */
    categoriesCountGetRaw(): Promise<runtime.ApiResponse<object>>;

    /**
     */
    categoriesCountGet(): Promise<object>;

    /**
     * 
     * @param {number} [limit] Maximum number of results possible
     * @param {string} [sort] Sort according to a specific field.
     * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiInterface
     */
    categoriesGetRaw(requestParameters: CategoriesGetRequest): Promise<runtime.ApiResponse<Array<Category>>>;

    /**
     */
    categoriesGet(requestParameters: CategoriesGetRequest): Promise<Array<Category>>;

    /**
     * Delete a record
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiInterface
     */
    categoriesIdDeleteRaw(requestParameters: CategoriesIdDeleteRequest): Promise<runtime.ApiResponse<number>>;

    /**
     * Delete a record
     */
    categoriesIdDelete(requestParameters: CategoriesIdDeleteRequest): Promise<number>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiInterface
     */
    categoriesIdGetRaw(requestParameters: CategoriesIdGetRequest): Promise<runtime.ApiResponse<Category>>;

    /**
     */
    categoriesIdGet(requestParameters: CategoriesIdGetRequest): Promise<Category>;

    /**
     * Update a record
     * @param {string} id 
     * @param {NewCategory} newCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiInterface
     */
    categoriesIdPutRaw(requestParameters: CategoriesIdPutRequest): Promise<runtime.ApiResponse<Category>>;

    /**
     * Update a record
     */
    categoriesIdPut(requestParameters: CategoriesIdPutRequest): Promise<Category>;

    /**
     * Create a new record
     * @param {NewCategory} newCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiInterface
     */
    categoriesPostRaw(requestParameters: CategoriesPostRequest): Promise<runtime.ApiResponse<Category>>;

    /**
     * Create a new record
     */
    categoriesPost(requestParameters: CategoriesPostRequest): Promise<Category>;

}

/**
 * 
 */
export class CategoryApi extends runtime.BaseAPI implements CategoryApiInterface {

    /**
     */
    async categoriesCountGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async categoriesCountGet(): Promise<object> {
        const response = await this.categoriesCountGetRaw();
        return await response.value();
    }

    /**
     */
    async categoriesGetRaw(requestParameters: CategoriesGetRequest): Promise<runtime.ApiResponse<Array<Category>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['_start'] = requestParameters.start;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryFromJSON));
    }

    /**
     */
    async categoriesGet(requestParameters: CategoriesGetRequest): Promise<Array<Category>> {
        const response = await this.categoriesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a record
     */
    async categoriesIdDeleteRaw(requestParameters: CategoriesIdDeleteRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling categoriesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete a record
     */
    async categoriesIdDelete(requestParameters: CategoriesIdDeleteRequest): Promise<number> {
        const response = await this.categoriesIdDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async categoriesIdGetRaw(requestParameters: CategoriesIdGetRequest): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling categoriesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     */
    async categoriesIdGet(requestParameters: CategoriesIdGetRequest): Promise<Category> {
        const response = await this.categoriesIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a record
     */
    async categoriesIdPutRaw(requestParameters: CategoriesIdPutRequest): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling categoriesIdPut.');
        }

        if (requestParameters.newCategory === null || requestParameters.newCategory === undefined) {
            throw new runtime.RequiredError('newCategory','Required parameter requestParameters.newCategory was null or undefined when calling categoriesIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewCategoryToJSON(requestParameters.newCategory),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Update a record
     */
    async categoriesIdPut(requestParameters: CategoriesIdPutRequest): Promise<Category> {
        const response = await this.categoriesIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new record
     */
    async categoriesPostRaw(requestParameters: CategoriesPostRequest): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.newCategory === null || requestParameters.newCategory === undefined) {
            throw new runtime.RequiredError('newCategory','Required parameter requestParameters.newCategory was null or undefined when calling categoriesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewCategoryToJSON(requestParameters.newCategory),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Create a new record
     */
    async categoriesPost(requestParameters: CategoriesPostRequest): Promise<Category> {
        const response = await this.categoriesPostRaw(requestParameters);
        return await response.value();
    }

}
