/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NewPromotedCategories,
    NewPromotedCategoriesFromJSON,
    NewPromotedCategoriesToJSON,
} from '../models';

export interface PromotedCategoriesGetRequest {
    limit?: number;
    sort?: string;
    start?: number;
}

export interface PromotedCategoriesPutRequest {
    newPromotedCategories: NewPromotedCategories;
}

/**
 * PromotedCategoriesApi - interface
 * 
 * @export
 * @interface PromotedCategoriesApiInterface
 */
export interface PromotedCategoriesApiInterface {
    /**
     * Delete a single promoted-categories record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotedCategoriesApiInterface
     */
    promotedCategoriesDeleteRaw(): Promise<runtime.ApiResponse<number>>;

    /**
     * Delete a single promoted-categories record
     */
    promotedCategoriesDelete(): Promise<number>;

    /**
     * Find all the promoted-categories\'s records
     * @param {number} [limit] Maximum number of results possible
     * @param {string} [sort] Sort according to a specific field.
     * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotedCategoriesApiInterface
     */
    promotedCategoriesGetRaw(requestParameters: PromotedCategoriesGetRequest): Promise<runtime.ApiResponse<object>>;

    /**
     * Find all the promoted-categories\'s records
     */
    promotedCategoriesGet(requestParameters: PromotedCategoriesGetRequest): Promise<object>;

    /**
     * Update a single promoted-categories record
     * @param {NewPromotedCategories} newPromotedCategories 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotedCategoriesApiInterface
     */
    promotedCategoriesPutRaw(requestParameters: PromotedCategoriesPutRequest): Promise<runtime.ApiResponse<object>>;

    /**
     * Update a single promoted-categories record
     */
    promotedCategoriesPut(requestParameters: PromotedCategoriesPutRequest): Promise<object>;

}

/**
 * 
 */
export class PromotedCategoriesApi extends runtime.BaseAPI implements PromotedCategoriesApiInterface {

    /**
     * Delete a single promoted-categories record
     */
    async promotedCategoriesDeleteRaw(): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/promoted-categories`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete a single promoted-categories record
     */
    async promotedCategoriesDelete(): Promise<number> {
        const response = await this.promotedCategoriesDeleteRaw();
        return await response.value();
    }

    /**
     * Find all the promoted-categories\'s records
     */
    async promotedCategoriesGetRaw(requestParameters: PromotedCategoriesGetRequest): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['_start'] = requestParameters.start;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/promoted-categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Find all the promoted-categories\'s records
     */
    async promotedCategoriesGet(requestParameters: PromotedCategoriesGetRequest): Promise<object> {
        const response = await this.promotedCategoriesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a single promoted-categories record
     */
    async promotedCategoriesPutRaw(requestParameters: PromotedCategoriesPutRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.newPromotedCategories === null || requestParameters.newPromotedCategories === undefined) {
            throw new runtime.RequiredError('newPromotedCategories','Required parameter requestParameters.newPromotedCategories was null or undefined when calling promotedCategoriesPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/promoted-categories`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewPromotedCategoriesToJSON(requestParameters.newPromotedCategories),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update a single promoted-categories record
     */
    async promotedCategoriesPut(requestParameters: PromotedCategoriesPutRequest): Promise<object> {
        const response = await this.promotedCategoriesPutRaw(requestParameters);
        return await response.value();
    }

}
