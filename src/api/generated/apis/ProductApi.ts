/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NewProduct,
    NewProductFromJSON,
    NewProductToJSON,
    Product,
    ProductFromJSON,
    ProductToJSON,
} from '../models';

export interface ProductsGetRequest {
    limit?: number;
    sort?: string;
    start?: number;
}

export interface ProductsIdDeleteRequest {
    id: string;
}

export interface ProductsIdGetRequest {
    id: string;
}

export interface ProductsIdPutRequest {
    id: string;
    newProduct: NewProduct;
}

export interface ProductsPostRequest {
    newProduct: NewProduct;
}

/**
 * ProductApi - interface
 * 
 * @export
 * @interface ProductApiInterface
 */
export interface ProductApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    productsCountGetRaw(): Promise<runtime.ApiResponse<object>>;

    /**
     */
    productsCountGet(): Promise<object>;

    /**
     * 
     * @param {number} [limit] Maximum number of results possible
     * @param {string} [sort] Sort according to a specific field.
     * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    productsGetRaw(requestParameters: ProductsGetRequest): Promise<runtime.ApiResponse<Array<Product>>>;

    /**
     */
    productsGet(requestParameters: ProductsGetRequest): Promise<Array<Product>>;

    /**
     * Delete a record
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    productsIdDeleteRaw(requestParameters: ProductsIdDeleteRequest): Promise<runtime.ApiResponse<number>>;

    /**
     * Delete a record
     */
    productsIdDelete(requestParameters: ProductsIdDeleteRequest): Promise<number>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    productsIdGetRaw(requestParameters: ProductsIdGetRequest): Promise<runtime.ApiResponse<Product>>;

    /**
     */
    productsIdGet(requestParameters: ProductsIdGetRequest): Promise<Product>;

    /**
     * Update a record
     * @param {string} id 
     * @param {NewProduct} newProduct 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    productsIdPutRaw(requestParameters: ProductsIdPutRequest): Promise<runtime.ApiResponse<Product>>;

    /**
     * Update a record
     */
    productsIdPut(requestParameters: ProductsIdPutRequest): Promise<Product>;

    /**
     * Create a new record
     * @param {NewProduct} newProduct 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    productsPostRaw(requestParameters: ProductsPostRequest): Promise<runtime.ApiResponse<Product>>;

    /**
     * Create a new record
     */
    productsPost(requestParameters: ProductsPostRequest): Promise<Product>;

}

/**
 * 
 */
export class ProductApi extends runtime.BaseAPI implements ProductApiInterface {

    /**
     */
    async productsCountGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async productsCountGet(): Promise<object> {
        const response = await this.productsCountGetRaw();
        return await response.value();
    }

    /**
     */
    async productsGetRaw(requestParameters: ProductsGetRequest): Promise<runtime.ApiResponse<Array<Product>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['_start'] = requestParameters.start;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductFromJSON));
    }

    /**
     */
    async productsGet(requestParameters: ProductsGetRequest): Promise<Array<Product>> {
        const response = await this.productsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a record
     */
    async productsIdDeleteRaw(requestParameters: ProductsIdDeleteRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling productsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete a record
     */
    async productsIdDelete(requestParameters: ProductsIdDeleteRequest): Promise<number> {
        const response = await this.productsIdDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async productsIdGetRaw(requestParameters: ProductsIdGetRequest): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling productsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     */
    async productsIdGet(requestParameters: ProductsIdGetRequest): Promise<Product> {
        const response = await this.productsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a record
     */
    async productsIdPutRaw(requestParameters: ProductsIdPutRequest): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling productsIdPut.');
        }

        if (requestParameters.newProduct === null || requestParameters.newProduct === undefined) {
            throw new runtime.RequiredError('newProduct','Required parameter requestParameters.newProduct was null or undefined when calling productsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewProductToJSON(requestParameters.newProduct),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Update a record
     */
    async productsIdPut(requestParameters: ProductsIdPutRequest): Promise<Product> {
        const response = await this.productsIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new record
     */
    async productsPostRaw(requestParameters: ProductsPostRequest): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters.newProduct === null || requestParameters.newProduct === undefined) {
            throw new runtime.RequiredError('newProduct','Required parameter requestParameters.newProduct was null or undefined when calling productsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewProductToJSON(requestParameters.newProduct),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Create a new record
     */
    async productsPost(requestParameters: ProductsPostRequest): Promise<Product> {
        const response = await this.productsPostRaw(requestParameters);
        return await response.value();
    }

}
